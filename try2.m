
% Señal original
y = [205,200,195,190,185,180,175,170,165,160,155,150,148,147,146.5,146,145.2,142,141.8,141.7,...
     141.6,141.7,141.8,141.9,142,142.1,142.2,142.3,142.4,142.5,142.6,142.7,142.8,142.9,...
     143,143.2,143.4,143.6,143.8,144,144.3,144.6,144.9,145.2,145.5,145.8,145.8,...
     145.9,146,146.1,146.1,146.1,146.1,146.2,146.2,146.3,146.3,...
     146.4,146.6,146.8,146.9,147,...
     148,149,...
     150,...
     150.2,...
     150.5,...
     150.8,...
     151.3,...
     151.6,...
     151.9,...
     152.2,...
     152.9,...
     153.7,...
     154.5,...
     160,...
     165,...
     174,...
     182,...
     190,...
     196,...
     200,...
     203,...
     203.4,...
     204,...
     204.9,...
     205,...
     205.6,...
     206,...
     206.4,...
     206.5,...
     206.4,...
     206.2,...
     205.9,...
     205.2,...
     204.7,...
     204.3,...
     204,...
     203.8,...
     203.5,...
     203];

% Número de señales similares
num_signals = 15;

% Matriz para almacenar las señales similares
signals_matrix = zeros(num_signals, length(y));

for i = 1:num_signals
    % Variación de la frecuencia fundamental o amplitud
    freq_factor = rand * (1.05 - 0.95) + 0.95;
    amp_factor = rand * (1.05 - 0.95) + 0.95;
    
    % Modificación de los datos
    modified_signal = y * amp_factor;
    modified_signal = interp1(1:length(modified_signal), modified_signal, linspace(1, length(modified_signal), round(length(modified_signal) * freq_factor)));
    
    % Asegurar que todas las señales tengan la misma longitud
    if length(modified_signal) > length(y)
        modified_signal = modified_signal(1:length(y));
    elseif length(modified_signal) < length(y)
        modified_signal = [modified_signal, zeros(1, length(y) - length(modified_signal))];
    end
    
    % Juntar más el inicio de la onda pero que sean variables
    start_variation = rand * (1 - 0.95) + 0.95;
    modified_signal(1:20) = modified_signal(1:20) * start_variation;
    
    % Suavizar la señal
    smoothed_signal = smoothdata(modified_signal, 'gaussian', 5);
    
    % Guardar la señal en la matriz
    signals_matrix(i, :) = smoothed_signal;
end

% Graficar las señales
figure;
hold on;
for i = 1:num_signals
    plot(signals_matrix(i, :));
end
title('Señales Similares con Frecuencia y Amplitud Variables');
xlabel('Muestra');
ylabel('Valor');
legend(arrayfun(@(x) sprintf('Señal %d', x), 1:num_signals, 'UniformOutput', false));
hold off;

% Mostrar la matriz de señales
disp(signals_matrix);
